// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserAccount {
  id        Int            @id @unique @default(autoincrement())
  username  String         @unique
  password  String
  groups    UserInGroups[]
  chats    UserInChats[]
  messages  Message[]
  //banList   BanList[]
  adminList AdminList[]
  role      String?

  @@map("user_accounts")
}

model UserInGroups {
  user     UserAccount @relation(fields: [userId], references: [id])
  userId   Int
  group    Group       @relation(fields: [groupId], references: [id])
  groupId  Int
  isBanned Boolean     @default(false)
  isAdmin  Boolean     @default(false)


  @@id([userId, groupId])
}

model UserInChats {
  user     UserAccount @relation(fields: [userId], references: [id])
  userId   Int
  chat    Chat       @relation(fields: [chatId], references: [id])
  chatId  Int
  isBanned Boolean     @default(false)
  //isAdmin  Boolean     @default(false)


  @@id([userId, chatId])
}


model Group {
  id      Int            @id @unique @default(autoincrement())
  chats   Chat[]
  members UserInGroups[]
  //banned  BanList[]
  admin   AdminList?     @relation(fields: [adminId], references: [userId])
  adminId Int?
  title   String         @unique
  image   String?

  @@map("groups")
}

model Chat {
  id       Int       @id @unique @default(autoincrement())
  group    Group     @relation(fields: [groupId], references: [id])
  groupId  Int
  title    String
  messages Message[]
  userInChat UserInChats[]

  @@map("chats")
}

model Message {
  id     Int         @id @unique @default(autoincrement())
  author UserAccount @relation(fields: [userId], references: [id])
  chat   Chat        @relation(fields: [chatId], references: [id])
  userId Int
  chatId Int
  text   String

  @@map("messages")
}

// model BanList {
//   user    UserAccount @relation(fields: [userId], references: [id])
//   userId  Int
//   group   Group       @relation(fields: [groupId], references: [id])
//   groupId Int

//   @@id([userId, groupId])
//   @@map("banlist")
// }

model AdminList {
  user   UserAccount @relation(fields: [userId], references: [id])
  userId Int         @id
  type   String
  group  Group[]

  @@map("adminlist")
}

model Session {
  sessionId String   @id @unique
  username  String
  role      String
  date      DateTime

  @@map("sessionlist")
}
